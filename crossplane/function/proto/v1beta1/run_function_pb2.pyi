"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Note that the authoritative Composition Functions protobuf definition lives
at the below URL. Each SDK maintains and manually syncs its own copy.
https://github.com/crossplane/crossplane/tree/master/apis/apiextensions/fn/proto
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _Ready:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ReadyEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Ready.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    READY_UNSPECIFIED: _Ready.ValueType  # 0
    READY_TRUE: _Ready.ValueType  # 1
    """True means the composed resource has been observed to be ready."""
    READY_FALSE: _Ready.ValueType  # 2
    """False means the composed resource has not been observed to be ready."""

class Ready(_Ready, metaclass=_ReadyEnumTypeWrapper):
    """Ready indicates whether a composed resource should be considered ready."""

READY_UNSPECIFIED: Ready.ValueType  # 0
READY_TRUE: Ready.ValueType  # 1
"""True means the composed resource has been observed to be ready."""
READY_FALSE: Ready.ValueType  # 2
"""False means the composed resource has not been observed to be ready."""
global___Ready = Ready

class _Severity:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _SeverityEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Severity.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    SEVERITY_UNSPECIFIED: _Severity.ValueType  # 0
    SEVERITY_FATAL: _Severity.ValueType  # 1
    """Fatal results are fatal; subsequent Composition Functions may run, but
    the Composition Function pipeline run will be considered a failure and
    the first fatal result will be returned as an error.
    """
    SEVERITY_WARNING: _Severity.ValueType  # 2
    """Warning results are non-fatal; the entire Composition will run to
    completion but warning events and debug logs associated with the
    composite resource will be emitted.
    """
    SEVERITY_NORMAL: _Severity.ValueType  # 3
    """Normal results are emitted as normal events and debug logs associated
    with the composite resource.
    """

class Severity(_Severity, metaclass=_SeverityEnumTypeWrapper):
    """Severity of Function results."""

SEVERITY_UNSPECIFIED: Severity.ValueType  # 0
SEVERITY_FATAL: Severity.ValueType  # 1
"""Fatal results are fatal; subsequent Composition Functions may run, but
the Composition Function pipeline run will be considered a failure and
the first fatal result will be returned as an error.
"""
SEVERITY_WARNING: Severity.ValueType  # 2
"""Warning results are non-fatal; the entire Composition will run to
completion but warning events and debug logs associated with the
composite resource will be emitted.
"""
SEVERITY_NORMAL: Severity.ValueType  # 3
"""Normal results are emitted as normal events and debug logs associated
with the composite resource.
"""
global___Severity = Severity

@typing_extensions.final
class RunFunctionRequest(google.protobuf.message.Message):
    """A RunFunctionRequest requests that the Composition Function be run."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    META_FIELD_NUMBER: builtins.int
    OBSERVED_FIELD_NUMBER: builtins.int
    DESIRED_FIELD_NUMBER: builtins.int
    INPUT_FIELD_NUMBER: builtins.int
    CONTEXT_FIELD_NUMBER: builtins.int
    @property
    def meta(self) -> global___RequestMeta:
        """Metadata pertaining to this request."""
    @property
    def observed(self) -> global___State:
        """The observed state prior to invocation of a Function pipeline. State passed
        to each Function is fresh as of the time the pipeline was invoked, not as
        of the time each Function was invoked.
        """
    @property
    def desired(self) -> global___State:
        """Desired state according to a Function pipeline. The state passed to a
        particular Function may have been accumulated by previous Functions in the
        pipeline.

        Note that the desired state must be a partial object with only the fields
        that this function (and its predecessors in the pipeline) wants to have
        set in the object. Copying a non-partial observed state to desired is most
        likely not what you want to do. Leaving out fields that had been returned
        as desired before will result in them being deleted from the objects in the
        cluster.
        """
    @property
    def input(self) -> google.protobuf.struct_pb2.Struct:
        """Optional input specific to this Function invocation. A JSON representation
        of the 'input' block of the relevant entry in a Composition's pipeline.
        """
    @property
    def context(self) -> google.protobuf.struct_pb2.Struct:
        """Optional context. Crossplane may pass arbitary contextual information to a
        Function. A Function may also return context in its RunFunctionResponse,
        and that context will be passed to subsequent Functions. Crossplane
        discards all context returned by the last Function in the pipeline.
        """
    def __init__(
        self,
        *,
        meta: global___RequestMeta | None = ...,
        observed: global___State | None = ...,
        desired: global___State | None = ...,
        input: google.protobuf.struct_pb2.Struct | None = ...,
        context: google.protobuf.struct_pb2.Struct | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_context", b"_context", "_input", b"_input", "context", b"context", "desired", b"desired", "input", b"input", "meta", b"meta", "observed", b"observed"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_context", b"_context", "_input", b"_input", "context", b"context", "desired", b"desired", "input", b"input", "meta", b"meta", "observed", b"observed"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_context", b"_context"]) -> typing_extensions.Literal["context"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_input", b"_input"]) -> typing_extensions.Literal["input"] | None: ...

global___RunFunctionRequest = RunFunctionRequest

@typing_extensions.final
class RunFunctionResponse(google.protobuf.message.Message):
    """A RunFunctionResponse contains the result of a Composition Function run."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    META_FIELD_NUMBER: builtins.int
    DESIRED_FIELD_NUMBER: builtins.int
    RESULTS_FIELD_NUMBER: builtins.int
    CONTEXT_FIELD_NUMBER: builtins.int
    @property
    def meta(self) -> global___ResponseMeta:
        """Metadata pertaining to this response."""
    @property
    def desired(self) -> global___State:
        """Desired state according to a Function pipeline. Functions may add desired
        state, and may mutate or delete any part of the desired state they are
        concerned with. A Function must pass through any part of the desired state
        that it is not concerned with.


        Note that the desired state must be a partial object with only the fields
        that this function (and its predecessors in the pipeline) wants to have
        set in the object. Copying a non-partial observed state to desired is most
        likely not what you want to do. Leaving out fields that had been returned
        as desired before will result in them being deleted from the objects in the
        cluster.
        """
    @property
    def results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Result]:
        """Results of the Function run. Results are used for observability purposes."""
    @property
    def context(self) -> google.protobuf.struct_pb2.Struct:
        """Optional context to be passed to the next Function in the pipeline as part
        of the RunFunctionRequest. Dropped on the last function in the pipeline.
        """
    def __init__(
        self,
        *,
        meta: global___ResponseMeta | None = ...,
        desired: global___State | None = ...,
        results: collections.abc.Iterable[global___Result] | None = ...,
        context: google.protobuf.struct_pb2.Struct | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_context", b"_context", "context", b"context", "desired", b"desired", "meta", b"meta"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_context", b"_context", "context", b"context", "desired", b"desired", "meta", b"meta", "results", b"results"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_context", b"_context"]) -> typing_extensions.Literal["context"] | None: ...

global___RunFunctionResponse = RunFunctionResponse

@typing_extensions.final
class RequestMeta(google.protobuf.message.Message):
    """RequestMeta contains metadata pertaining to a RunFunctionRequest."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TAG_FIELD_NUMBER: builtins.int
    tag: builtins.str
    """An opaque string identifying the content of the request. Two identical
    requests should have the same tag.
    """
    def __init__(
        self,
        *,
        tag: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["tag", b"tag"]) -> None: ...

global___RequestMeta = RequestMeta

@typing_extensions.final
class ResponseMeta(google.protobuf.message.Message):
    """ResponseMeta contains metadata pertaining to a RunFunctionResponse."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TAG_FIELD_NUMBER: builtins.int
    TTL_FIELD_NUMBER: builtins.int
    tag: builtins.str
    """An opaque string identifying the content of the request. Must match the
    meta.tag of the corresponding RunFunctionRequest.
    """
    @property
    def ttl(self) -> google.protobuf.duration_pb2.Duration:
        """Time-to-live of this response. Deterministic Functions with no side-effects
        (e.g. simple templating Functions) may specify a TTL. Crossplane may choose
        to cache responses until the TTL expires.
        """
    def __init__(
        self,
        *,
        tag: builtins.str = ...,
        ttl: google.protobuf.duration_pb2.Duration | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_ttl", b"_ttl", "ttl", b"ttl"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_ttl", b"_ttl", "tag", b"tag", "ttl", b"ttl"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_ttl", b"_ttl"]) -> typing_extensions.Literal["ttl"] | None: ...

global___ResponseMeta = ResponseMeta

@typing_extensions.final
class State(google.protobuf.message.Message):
    """State of the composite resource (XR) and any composed resources."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class ResourcesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___Resource: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___Resource | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    COMPOSITE_FIELD_NUMBER: builtins.int
    RESOURCES_FIELD_NUMBER: builtins.int
    @property
    def composite(self) -> global___Resource:
        """The state of the composite resource (XR)."""
    @property
    def resources(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___Resource]:
        """The state of any composed resources."""
    def __init__(
        self,
        *,
        composite: global___Resource | None = ...,
        resources: collections.abc.Mapping[builtins.str, global___Resource] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["composite", b"composite"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["composite", b"composite", "resources", b"resources"]) -> None: ...

global___State = State

@typing_extensions.final
class Resource(google.protobuf.message.Message):
    """A Resource represents the state of a composite or composed resource."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class ConnectionDetailsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.bytes
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.bytes = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    RESOURCE_FIELD_NUMBER: builtins.int
    CONNECTION_DETAILS_FIELD_NUMBER: builtins.int
    READY_FIELD_NUMBER: builtins.int
    @property
    def resource(self) -> google.protobuf.struct_pb2.Struct:
        """The JSON representation of the resource.

        * Crossplane will set this field in a RunFunctionRequest to the entire
          observed state of a resource - including its metadata, spec, and status.

        * A Function should set this field in a RunFunctionRequest to communicate
          the desired state of a composite or composed resource.

        * A Function may only specify the desired status of a composite resource -
          not its metadata or spec. A Function should not return desired metadata
          or spec for a composite resource. This will be ignored.

        * A Function may not specify the desired status of a composed resource -
          only its metadata and spec. A Function should not return desired status
          for a composed resource. This will be ignored.
        """
    @property
    def connection_details(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.bytes]:
        """The resource's connection details.

        * Crossplane will set this field in a RunFunctionRequest to communicate the
          the observed connection details of a composite or composed resource.

        * A Function should set this field in a RunFunctionResponse to indicate the
          desired connection details of the composite resource.

        * A Function should not set this field in a RunFunctionResponse to indicate
          the desired connection details of a composed resource. This will be
          ignored.
        """
    ready: global___Ready.ValueType
    """Ready indicates whether the resource should be considered ready.

    * Crossplane will never set this field in a RunFunctionRequest.

    * A Function should set this field to READY_TRUE in a RunFunctionResponse
      to indicate that a desired composed resource is ready.

    * A Function should not set this field in a RunFunctionResponse to indicate
      that the desired composite resource is ready. This will be ignored.
    """
    def __init__(
        self,
        *,
        resource: google.protobuf.struct_pb2.Struct | None = ...,
        connection_details: collections.abc.Mapping[builtins.str, builtins.bytes] | None = ...,
        ready: global___Ready.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["resource", b"resource"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["connection_details", b"connection_details", "ready", b"ready", "resource", b"resource"]) -> None: ...

global___Resource = Resource

@typing_extensions.final
class Result(google.protobuf.message.Message):
    """A Result of running a Function."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SEVERITY_FIELD_NUMBER: builtins.int
    MESSAGE_FIELD_NUMBER: builtins.int
    severity: global___Severity.ValueType
    """Severity of this result."""
    message: builtins.str
    """Human-readable details about the result."""
    def __init__(
        self,
        *,
        severity: global___Severity.ValueType = ...,
        message: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["message", b"message", "severity", b"severity"]) -> None: ...

global___Result = Result
